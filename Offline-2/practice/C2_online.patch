diff --git a/Makefile b/Makefile
index f8c820e..c73f56b 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_target\
+	$U/_freq\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..531a8c1 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -185,5 +185,8 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+void setTargetChar(char c);
+int countTargetFreq(const char* str);
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..287d2cf 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -693,3 +693,46 @@ procdump(void)
     printf("\n");
   }
 }
+
+char target_char = 'a';
+
+
+void
+setTargetChar(char c)
+{
+  struct proc *p = myproc();
+  if(c < 0 || c > 127) {
+    printf("setTargetChar: invalid character %d\n", c);
+    return;
+  }
+  
+  acquire(&p->lock);
+  target_char = c;
+  printf("Target character set to ");
+  consputc(target_char);
+  printf("\n");
+  release(&p->lock);
+}
+
+int
+countTargetFreq(const char *str)
+{
+  struct proc *p = myproc();
+  int count = 0;
+  
+  acquire(&p->lock);
+  if(str == 0 || str[0] == '\0') {
+    printf("countTargetFreq: empty string\n");
+    release(&p->lock);
+    return -1;
+  }
+  
+  for(int i = 0; str[i] != '\0'; i++) {
+    if(str[i] == target_char) {
+      count++;
+    }
+  }
+  release(&p->lock);
+  
+  return count;
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..6f85f0e 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_setTargetChar(void);
+extern uint64 sys_countTargetFreq(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_setTargetChar] sys_setTargetChar,
+[SYS_countTargetFreq] sys_countTargetFreq,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..cfbf782 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_setTargetChar  22
+#define SYS_countTargetFreq  23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..2a57b13 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,30 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_setTargetChar(void)
+{
+  int c;
+  argint(0, &c);
+  if(c<0 || c>127){
+    printf("gettargetchar: invalid character %d\n", c);
+    return -1;
+  }
+  setTargetChar(c);
+  return 0;
+}
+
+uint64
+sys_countTargetFreq(void)
+{
+  char str[128];
+  argstr(0, str, sizeof(str));
+  if(str[0] == '\0'){
+    printf("counttargetfreq: empty string\n");
+    return -1;
+  }
+  
+  int count = countTargetFreq(str);
+  return count;
+}
\ No newline at end of file
diff --git a/user/freq.c b/user/freq.c
new file mode 100644
index 0000000..265146f
--- /dev/null
+++ b/user/freq.c
@@ -0,0 +1,21 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int 
+main(int argc, char *argv[])
+{
+    if (argc != 2)
+    {
+        fprintf(2, "Usage: target <command>\n");
+        exit(1);
+    }
+
+    char *str = argv[1];
+
+    int cnt = countTargetFreq(str);
+
+    printf("Found %d occurrences of target\n", cnt);
+
+    return 0;
+}
diff --git a/user/target.c b/user/target.c
new file mode 100644
index 0000000..04d40bc
--- /dev/null
+++ b/user/target.c
@@ -0,0 +1,19 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int 
+main(int argc, char *argv[])
+{
+    if (argc != 2)
+    {
+        fprintf(2, "Usage: target <command>\n");
+        exit(1);
+    }
+
+    char c = argv[1][0];
+
+    setTargetChar(c);
+
+    return 0;
+}
diff --git a/user/user.h b/user/user.h
index f16fe27..19542fa 100644
--- a/user/user.h
+++ b/user/user.h
@@ -41,3 +41,6 @@ void *memcpy(void *, const void *, uint);
 // umalloc.c
 void* malloc(uint);
 void free(void*);
+
+void setTargetChar(char c);
+int countTargetFreq(const char* str);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..7a97c55 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("setTargetChar");
+entry("countTargetFreq");
\ No newline at end of file
