diff --git a/Makefile b/Makefile
index f8c820e..ccb6d86 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testloop\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -160,7 +161,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..309a34f 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -124,6 +124,8 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->priority = 1000;
+  p->wait_start_time = 0;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -455,23 +457,53 @@ scheduler(void)
     intr_on();
 
     int found = 0;
-    for(p = proc; p < &proc[NPROC]; p++) {
+    // reschedule aging ones
+    for(p=proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if(p->state==RUNNABLE && p->wait_start_time>0 && ticks-p->wait_start_time >= 30){
+        p->priority+=10;
+        p->wait_start_time=ticks;
+        printf("Process %d priority increased to %d\n",p->pid,p->priority);
+      }
+      release(&p->lock);
+    }
+    struct proc *highest_priority_proc = 0;
+    int max_priority = -1;
+    for(p=proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
+
+      if(p->state==RUNNABLE && p->priority > max_priority){
+        highest_priority_proc = p;
+        max_priority = p->priority;
+      }
+      
+      release(&p->lock);
+    }
+
+    if(highest_priority_proc){
+      acquire(&highest_priority_proc->lock);
+      
+      if(highest_priority_proc->state == RUNNABLE) {
+        highest_priority_proc->state = RUNNING;
+        highest_priority_proc->wait_start_time = 0;
+        // printf("Running process %d with priority %d\n", highest_priority_proc->pid, highest_priority_proc->priority);
+        c->proc = highest_priority_proc;
+        swtch(&c->context, &highest_priority_proc->context);
         c->proc = 0;
         found = 1;
       }
+      
+      release(&highest_priority_proc->lock);
+    }
+
+    for(p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if(p->state == RUNNABLE && p != highest_priority_proc && p->wait_start_time == 0) {
+        p->wait_start_time = ticks; // Start waiting
+      }
       release(&p->lock);
     }
+
     if(found == 0) {
       // nothing to run; stop running on this core until an interrupt.
       intr_on();
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..3cf2510 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int priority;                // Process priority
+  uint64 wait_start_time;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..2eaf268 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_setpriority(void);
+extern uint64 sys_getpriority(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_setpriority]   sys_setpriority,
+[SYS_getpriority]   sys_getpriority,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..164098a 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_setpriority  22
+#define SYS_getpriority  23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..d020d21 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,32 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_setpriority(void)
+{
+  struct proc *p = myproc();
+  int priority;
+  argint(0, &priority);
+
+  if(priority < 0)
+  {
+    return -1; // Invalid priority
+  }
+  
+  acquire(&p->lock);
+  p->priority = priority;
+  p->wait_start_time = ticks;
+  release(&p->lock);
+  return 0;
+}
+
+uint64
+sys_getpriority(void)
+{
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  int priority = p->priority;
+  release(&p->lock);
+  return priority;
+}
\ No newline at end of file
diff --git a/user/testloop.c b/user/testloop.c
new file mode 100644
index 0000000..1f9d6ec
--- /dev/null
+++ b/user/testloop.c
@@ -0,0 +1,26 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#define BYEL "\e[1;33m"
+#define BRED "\e[1;31m"
+#define CRESET "\e[0m"
+
+int main(int argc, char* argv[]){
+    int pid = getpid();
+    uint32 iters = atoi(argv[1]);
+    int priority = atoi(argv[2]);
+    setpriority(priority);
+    sleep(5); // to let the scheduler run and set the priority
+    int entry_time = uptime();
+    printf(BYEL "PID %d: Starting %u iterations at time %d. Initial priority: %d, current: %d\n" CRESET, pid, iters, entry_time, priority, getpriority());
+    for(int i = 0; i < iters*3; i++){
+        // do some dummy work
+        for(int j = 0; j < 50000000; j++){
+            int x = j * j;
+            x = x + 1;
+        }
+    }
+    int exit_time = uptime();
+    printf(BRED "PID %d: Finished at time %d. Initial pr: %d, current: %d\n" CRESET, pid, exit_time, priority, getpriority());
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index f16fe27..6d8fc1f 100644
--- a/user/user.h
+++ b/user/user.h
@@ -41,3 +41,5 @@ void *memcpy(void *, const void *, uint);
 // umalloc.c
 void* malloc(uint);
 void free(void*);
+int setpriority(int);
+int getpriority(void);
\ No newline at end of file
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..57fc608 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("setpriority");
+entry("getpriority");
