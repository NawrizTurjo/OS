diff --git a/Makefile b/Makefile
index f8c820e..ccb6d86 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testloop\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -160,7 +161,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..af9c54b 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -124,6 +124,8 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->total_runtime = 1000;
+  p->remaining_time = 1000; // Initialize remaining time to 1000
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -455,22 +457,65 @@ scheduler(void)
     intr_on();
 
     int found = 0;
-    for(p = proc; p < &proc[NPROC]; p++) {
+    struct proc *srtf = 0;
+    int min_remaining_time = 0x7fffffff; // Large value
+    for(p=proc;p<&proc[NPROC];p++){
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
+      if(p->state==RUNNABLE && p->remaining_time > 0)
+      {
+        // printf("Inside SRTF candidate: %s (PID: %d, Remaining Time: %d)\n", p->name, p->pid, p->remaining_time);
+        if(p->remaining_time < min_remaining_time){
+          srtf = p;
+          min_remaining_time = p->remaining_time;
+        }
+      }
+      release(&p->lock);
+    }
+    /* 
+      testloop 250 &;testloop 200 &;testloop 150 &;
+      testloop 50 &;
+    */
+
+    if(srtf)
+    {
+      acquire(&srtf->lock);
+      // printf("SRTF candidate chosen: %s (PID: %d, Remaining Time: %d)\n", srtf->name, srtf->pid, srtf->remaining_time);
+      if(srtf->state == RUNNABLE && srtf->remaining_time > 0){
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
+        int start_ticks;
+        acquire(&tickslock);
+        start_ticks = ticks;
+        release(&tickslock);
+        
+        // printf("Running process: %s (PID: %d, Remaining Time: %d)\n", srtf->name, srtf->pid, srtf->remaining_time);
+        
+        
+        srtf->state = RUNNING;
+        c->proc = srtf;
+        swtch(&c->context, &srtf->context);
+        
+        int end_ticks;
+        acquire(&tickslock);
+        end_ticks = ticks;
+        release(&tickslock);
+        int changed = (end_ticks - start_ticks);
+        // printf("Changed: %d\n",changed);
+        if (srtf->remaining_time > 0) {
+          srtf->remaining_time -= changed;
+          //   if(srtf->remaining_time <= 0 && srtf->state == RUNNING) {
+          //   srtf->state = ZOMBIE; // Mark as done
+          // }
+        }
 
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
         found = 1;
       }
-      release(&p->lock);
+      
+      release(&srtf->lock);
     }
     if(found == 0) {
       // nothing to run; stop running on this core until an interrupt.
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..9f2c26c 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint32 total_runtime; // set using setlength()
+  uint32 remaining_time; // Remaining time for the process -> updated during the rutime
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..5da5c1a 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_setlength(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_setlength]   sys_setlength,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..80f5839 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_setlength  22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..edea936 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,21 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_setlength(void)
+{
+  struct proc *p = myproc();
+  int n;
+  argint(0, &n);
+
+  acquire(&p->lock);
+
+  p->total_runtime = n;
+  p->remaining_time = n; // Set remaining time to the total runtime
+  printf("Process %d: Total runtime set to %d, remaining time=%d\n", p->pid, n,p->remaining_time);
+  
+  release(&p->lock);
+
+  return 0;
+}
\ No newline at end of file
diff --git a/user/testloop.c b/user/testloop.c
new file mode 100644
index 0000000..8c5a635
--- /dev/null
+++ b/user/testloop.c
@@ -0,0 +1,26 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char* argv[]){
+    int pid = getpid();
+    int entry_time = uptime();
+    uint32 iters = atoi(argv[1]);
+    setlength(iters);
+    printf("Process %d: Starting %u iterations at time %d\n", pid, iters, entry_time);
+    // for(int i = 0; i < iters; i++){
+    //     // do some dummy work
+    //     for(int j = 0; j < 50000000; j++){
+    //         int x = j * j;
+    //         x = x + 1;
+    //     }
+    // }
+    sleep(5);
+    for(;;)
+    {
+
+    }
+    int exit_time = uptime();
+    printf("Process %d: Finished at time %d\n", pid, exit_time);
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index f16fe27..6879a6b 100644
--- a/user/user.h
+++ b/user/user.h
@@ -41,3 +41,5 @@ void *memcpy(void *, const void *, uint);
 // umalloc.c
 void* malloc(uint);
 void free(void*);
+
+int setlength(uint32);
\ No newline at end of file
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2e49f2 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("setlength");
\ No newline at end of file
