diff --git a/Makefile b/Makefile
index f8c820e..05e2122 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_seed\
+	$U/_next\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..78c305b 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_seed(void);
+extern uint64 sys_next(void);
+
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_seed]    sys_seed,
+[SYS_next]    sys_next,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..9bf7484 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_seed   22
+#define SYS_next   23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..1e77ec9 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,21 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int seed = 0;
+
+uint64
+sys_seed(void)
+{
+  int n;
+  argint(0, &n);
+  seed = n;
+  return 0;
+}
+
+uint64
+sys_next(void)
+{
+  seed++;
+  return seed;
+}
\ No newline at end of file
diff --git a/user/next.c b/user/next.c
new file mode 100644
index 0000000..371f1de
--- /dev/null
+++ b/user/next.c
@@ -0,0 +1,12 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main()
+{
+  int next_num = next();
+  printf("Next random number is %d\n", next_num);
+  
+  return 0;
+}
diff --git a/user/seed.c b/user/seed.c
new file mode 100644
index 0000000..3ee585f
--- /dev/null
+++ b/user/seed.c
@@ -0,0 +1,18 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[])
+{
+    if (argc != 2)
+    {
+        fprintf(2, "Usage: seed <new_seed>\n");
+        return 1;
+    }
+
+    int new_seed = atoi(argv[1]);
+
+    seed(new_seed);
+    printf("The seed has been set to %d\n", new_seed);
+    return 0;
+}
diff --git a/user/user.h b/user/user.h
index f16fe27..614597a 100644
--- a/user/user.h
+++ b/user/user.h
@@ -41,3 +41,5 @@ void *memcpy(void *, const void *, uint);
 // umalloc.c
 void* malloc(uint);
 void free(void*);
+int seed(int);
+int next();
\ No newline at end of file
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..6162850 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("seed");
+entry("next");
\ No newline at end of file
