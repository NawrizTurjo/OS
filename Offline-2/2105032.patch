diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..eb9aa93
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,9 @@
+{
+    "files.associations": {
+        "syscall_stat.h": "c",
+        "syscall.h": "c",
+        "types.h": "c",
+        "spinlock.h": "c",
+        "proc.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index f8c820e..f1418b1 100644
--- a/Makefile
+++ b/Makefile
@@ -13,6 +13,7 @@ OBJS = \
   $K/main.o \
   $K/vm.o \
   $K/proc.o \
+  $K/randomnum.o \
   $K/swtch.o \
   $K/trampoline.o \
   $K/trap.o \
@@ -139,6 +140,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_history\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..dd8600b 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -185,5 +185,11 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+int             settickets(int n);
+int             getpinfo(uint64 addr);
+
+uint32          randomnum(void);
+void            srand(uint64);
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..0f2da13 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -3,20 +3,34 @@
 #include "memlayout.h"
 #include "riscv.h"
 #include "defs.h"
+#include "spinlock.h"
 
 volatile static int started = 0;
-
 // start() jumps here in supervisor mode on all CPUs.
 void
 main()
 {
   if(cpuid() == 0){
+    // printf("Hello From ME :> \n");
     consoleinit();
     printfinit();
     printf("\n");
     printf("xv6 kernel is booting\n");
     printf("\n");
     kinit();         // physical page allocator
+    
+    extern struct spinlock stats_lock[];
+    extern int syscall_counts[];
+    extern int syscall_times[];
+
+    for(int i = 0; i < NSYSCALL; i++) {
+      initlock(&stats_lock[i], "stat");
+      syscall_counts[i] = 0;
+      syscall_times[i]  = 0;
+    }
+
+    
+    
     kvminit();       // create kernel page table
     kvminithart();   // turn on paging
     procinit();      // process table
diff --git a/kernel/param.h b/kernel/param.h
index 80ec6d3..4dcc722 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -13,3 +13,11 @@
 #define MAXPATH      128   // maximum file path name
 #define USERSTACK    1     // user stack pages
 
+#define DEFAULT_TICKET_COUNT    10      // default tickets per process
+#define TIME_LIMIT_1            1       // ticks for queue 1 (lottery)
+#define TIME_LIMIT_2            2       // ticks for queue 2 (round-robin)
+#define BOOST_INTERVAL          64      // ticks before priority boost
+#define NSYSCALL                25      // number of system calls
+
+#define PRINT_SHCEDULING        1       // for printing the debugging information
+#define EXTRA_LOGGING           1       // moreee logging
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..2162d08 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -14,6 +15,8 @@ struct proc *initproc;
 
 int nextpid = 1;
 struct spinlock pid_lock;
+struct spinlock scheduler_lock;
+struct spinlock rng_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
@@ -51,6 +54,8 @@ procinit(void)
   
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
+  initlock(&scheduler_lock, "scheduler_lock");
+  initlock(&rng_lock,"random_num_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
       p->state = UNUSED;
@@ -123,8 +128,17 @@ allocproc(void)
 
 found:
   p->pid = allocpid();
+  if(PRINT_SHCEDULING)
+    printf("[LOG REPORT] ALLOCPROC :: allocated PID-%d\n", p->pid);
   p->state = USED;
 
+  p->queue             = 1;
+  p->tickets_original  = DEFAULT_TICKET_COUNT;
+  p->tickets_current   = DEFAULT_TICKET_COUNT;
+  p->timeslices_run    = 0;
+  p->timeslices_in_cur = 0;
+
+
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
@@ -318,8 +332,21 @@ fork(void)
   np->parent = p;
   release(&wait_lock);
 
+  
+  acquire(&p->lock);
+
+  int parent_tickets = p->tickets_original;
+  
+  release(&p->lock);
+  
   acquire(&np->lock);
   np->state = RUNNABLE;
+  // Inherit MLFQ fields from parent
+  np->queue             = 1;                       // always start in queue 1
+  np->tickets_original  = parent_tickets;      // same as parent
+  np->tickets_current   = parent_tickets;
+  np->timeslices_run    = 0;
+  np->timeslices_in_cur = 0;
   release(&np->lock);
 
   return pid;
@@ -447,36 +474,189 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
 
+  // static uint64 last_boost_time = 0;
+  // uint64 start_tick;
+  int total_tickets;
+  // int winner, cumulative;
+  // struct proc *winner_proc;
+
   c->proc = 0;
-  for(;;){
-    // The most recent process to run may have had interrupts
-    // turned off; enable them to avoid a deadlock if all
-    // processes are waiting.
+
+  // lottery scheduling
+  for(;;)
+  {
     intr_on();
 
-    int found = 0;
+    acquire(&scheduler_lock);
+    
+    total_tickets = 0;
+    int has_runnables = 0;
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
+      if(p->state == RUNNABLE && p->queue == 1) {
+        total_tickets += p->tickets_current;
+        has_runnables = 1;
+      }
+      release(&p->lock);
+    }
+
+    // zero ticket case handle
+    if(total_tickets==0 && has_runnables)
+    {
+      for(p=proc;p<&proc[NPROC];p++)
+      {
+        acquire(&p->lock);
+        if(p->state==RUNNABLE && p->queue==1)
+        {
+          // reset all ticket count
+          p->tickets_current = p->tickets_original;
+          total_tickets += p->tickets_current;
+        }
+        release(&p->lock);
+      }
+    }
+    release(&scheduler_lock);
+    
+    if(total_tickets > 0){
+      int f = 0;
+      int l_index = 0;
+      // Draw winning ticket
+      int winner_ticket = (randomnum() % total_tickets) + 1;
+      int cumulative = 0;
+
+      // Find the winning process
+      for(p = proc; p < &proc[NPROC]; p++, l_index++){
+        acquire(&p->lock);
+        if(p->state == RUNNABLE && p->queue == 1){
+          cumulative += p->tickets_current;
+          if(cumulative >= winner_ticket){
+            p->tickets_current--;
+            
+            // Schedule p
+            p->state  = RUNNING;
+            c->proc   = p;
+            
+            // Keep lock held across swtch to avoid races
+            // release(&scheduler_lock);
+            swtch(&c->context, &p->context);
+            c->proc = 0;
+
+            // Coming back: update stats
+            p->timeslices_run++;
+            p->timeslices_in_cur++;
+            f = 1;
+            
+            if(PRINT_SHCEDULING && EXTRA_LOGGING)
+            {
+              // printf("Process %d at index %d running at queue 1 with original tickets %d, remaining tickets %d and current time slices %d; total tickets: %d\n",
+              //         p->pid,l_index,p->tickets_original,p->tickets_current,p->timeslices_in_cur,total_tickets);
+              printf("[LOG REPORT] Process PID-%d running in Lottery Scheduler (QUEUE 1) [INDEX: %d]::ORIGINAL TICKETS:%d, CURRENT_TICKETS: %d, Time Slices: %d:: SCHEDULER TOTAL TICKETS: %d, CPUID=%d\n",
+                     p->pid, l_index, p->tickets_original, p->tickets_current, p->timeslices_in_cur, total_tickets,cpuid());
+              // switch (p->state)
+              // {
+              // case RUNNABLE:
+              //   printf("Process %d is still RUNNABLE at queue 1\n", p->pid);
+              //   break;
+              // case RUNNING:
+              //   printf("Process %d is RUNNING at queue 1\n", p->pid);
+              //   break;
+              // case SLEEPING:
+              //   printf("Process %d is SLEEPING at queue 1\n", p->pid);
+              //   break;
+              // case ZOMBIE:
+              //   printf("Process %d is ZOMBIE at queue 1\n", p->pid);
+              //   break;
+              // default:
+              //   printf("Process %d is UNUSED at queue 1\n", p->pid);
+              //   break;
+              // }
+              // pstat er haal
+              // printf("PSTAT: p->pid: %d, p->inuse: %d, p->inQ: %d, p->tickets_original: %d, p->tickets_current: %d, p->time_slices: %d\n",
+              //        p->pid, 1, p->queue, p->tickets_original, p->tickets_current, p->timeslices_run);
+            }
+            // Demote if it used full slice
+            if(p->timeslices_in_cur >= TIME_LIMIT_1){
+              if(PRINT_SHCEDULING)
+                printf("[LOG REPORT] ::Demotion:: Process PID-%d from Lottery(QUEUE 1) to RR(QUEUE 2) at TICK-%d, CPUID=%d\n", p->pid,ticks,cpuid());
+              p->queue = 2;
+            }
+            p->timeslices_in_cur = 0;
+
+            release(&p->lock);
+            break;
+          }
+          // if(PRINT_SHCEDULING)
+          // {
+          //   printf("kisu ekta");
+          // }
+        }
+        release(&p->lock);
+      }
+
+      if(f)
+      {
+        continue;
+      }
+    }
+    
+    // no process in queue-1 so ebar round-robin scheduling
+    int found = 0;
+    int rr_index = 0;
+    for(p=proc;p<&proc[NPROC];p++,rr_index++)
+    {
+      
+      acquire(&p->lock);
+      
+      if(p->state==RUNNABLE && p->queue == 2)
+      {
+        // start_tick  = ticks;
+        p->state    = RUNNING;
+        c->proc     = p;
+
+        
         swtch(&c->context, &p->context);
 
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
-        found = 1;
+
+        c->proc     = 0;
+
+        p->timeslices_run++;
+        p->timeslices_in_cur++;
+        found       = 1;
+        if(PRINT_SHCEDULING && EXTRA_LOGGING)
+        {
+          // printf("Process %d at index %d running at queue 2 with original tickets %d, remaining tickets %d and current time slices %d; total tickets: %d\n",p->pid,rr_index,p->tickets_original,p->tickets_current,p->timeslices_in_cur,total_tickets);
+          // #ok as ticket komtese na
+          // printf("Process %d is running at index %d of queue 2\n",p->pid,rr_index);
+          // printf("[LOG REPORT] Process PID-%d running in RR (QUEUE 2) [INDEX: %d]:: Time Slices: %d\n",
+          //        p->pid, rr_index, p->timeslices_in_cur);
+
+          // tickets unchenged
+          // log for this:
+          // int ccc = cpuid();
+          printf("[LOG REPORT] Process PID-%d running in RR (QUEUE 2) [INDEX: %d]:: Time Slices: %d, CPUID=%d\n\t\tAdditional Info: Original Tickets: %d, Current Tickets: %d\n",
+                p->pid, rr_index, p->timeslices_in_cur,cpuid(),p->tickets_original,p->tickets_current);
+        }
+        if(p->timeslices_in_cur < TIME_LIMIT_2)
+        {
+          // default e back korlam
+          if(PRINT_SHCEDULING)
+            printf("[LOG REPORT] ::Promotion:: Process PID-%d from RR (QUEUE 2) to Lottery (QUEUE 1) at TICK-%d, CPUID=%d\n", p->pid,ticks,cpuid());
+          p->queue = 1;
+        }
+        p->timeslices_in_cur  = 0;
+        release(&p->lock);
+        break;
       }
+      
       release(&p->lock);
     }
-    if(found == 0) {
-      // nothing to run; stop running on this core until an interrupt.
-      intr_on();
-      asm volatile("wfi");
+
+    if(!found){
+      // release(&scheduler_lock);
+      asm volatile("wfi"); // nothing to run, wait for an interrupt
+      // continue;
     }
+   
   }
 }
 
@@ -513,7 +693,9 @@ yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
+
   p->state = RUNNABLE;
+  
   sched();
   release(&p->lock);
 }
@@ -693,3 +875,46 @@ procdump(void)
     printf("\n");
   }
 }
+
+int
+settickets(int n)
+{
+  struct proc *p = myproc();
+  
+  acquire(&p->lock);
+  p->tickets_original = n;
+  p->tickets_current = n;
+  release(&p->lock);
+
+  return 0;
+}
+
+int
+getpinfo(uint64 addr)
+{
+  struct proc *curr = myproc(); // holds the current process
+  struct proc *p;
+  struct pstat ps;
+  int i=0;
+  
+  acquire(&scheduler_lock);
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+
+    ps.inuse[i]            = (p->state==RUNNABLE || p->state==RUNNING);
+    ps.pid[i]              = p->pid;
+    ps.inQ[i]              = p->queue;
+    ps.tickets_original[i] = p->tickets_original;
+    ps.tickets_current[i]  = p->tickets_current;
+    ps.time_slices[i]      = p->timeslices_run;
+    i++;
+    release(&p->lock);
+  }
+  release(&scheduler_lock);
+
+  // Copy local ps back into user memory at addr
+  if(copyout(curr->pagetable, addr, (char *)&ps, sizeof(ps)) < 0)
+    return -1;
+
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..7e77bbc 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,11 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int queue;                    // 1 or 2: which MLFQ queue this proc is in
+  int tickets_original;         // original ticket count (inherited from parent)
+  int tickets_current;          // remaining tickets for lottery scheduling
+  int timeslices_run;           // how many ticks this proc has run (total)
+  int timeslices_in_cur;        // ticks used in its current time‐slice window
+  int last_boost_tick;          // track last tick when priority boosting happened
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..7091b96
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,15 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+    int pid [NPROC];                // the process ID of each process
+    int inuse [NPROC];              // whether this slot of the process table is being used (1 or 0)
+    int inQ [NPROC];                // which queue the process is currently in
+    int tickets_original [NPROC];   // the number of tickets each process originally had
+    int tickets_current [NPROC];    // the number of tickets each process currently has
+    int time_slices [NPROC];        // the number of time slices each process has been scheduled 
+};
+
+# endif                             // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/randomnum.c b/kernel/randomnum.c
new file mode 100644
index 0000000..0c8ebcd
--- /dev/null
+++ b/kernel/randomnum.c
@@ -0,0 +1,35 @@
+#include "types.h"
+#include "riscv.h"
+#include "defs.h"
+#include "spinlock.h"
+
+static uint32 rng_state = 1234567;
+extern struct spinlock rng_lock;
+
+/*
+ Random Number Generator (RNG)
+ source: https://en.wikipedia.org/wiki/Xorshift
+*/
+
+void
+srand(uint64 seed)
+{
+  acquire(&rng_lock);
+  rng_state = seed ? seed : 1;  // Ensure non-zero seed
+  release(&rng_lock);
+}
+
+uint32
+randomnum(void)
+{
+  uint32 result;
+  
+  acquire(&rng_lock);
+  rng_state ^= rng_state << 13;
+  rng_state ^= rng_state >> 17;
+  rng_state ^= rng_state << 5;
+  result = rng_state;
+  release(&rng_lock);
+  
+  return result;
+}
\ No newline at end of file
diff --git a/kernel/spinlock.c b/kernel/spinlock.c
index 9840302..b76741f 100644
--- a/kernel/spinlock.c
+++ b/kernel/spinlock.c
@@ -22,8 +22,10 @@ void
 acquire(struct spinlock *lk)
 {
   push_off(); // disable interrupts to avoid deadlock.
-  if(holding(lk))
-    panic("acquire");
+  if(holding(lk)){
+    printf("acquire: already holding lock '%s'\n", lk->name);
+
+  }
 
   // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
   //   a5 = 1
@@ -47,7 +49,10 @@ void
 release(struct spinlock *lk)
 {
   if(!holding(lk))
-    panic("release");
+    {
+      printf("panic: release of unlocked lock %s at %p\n", lk->name, lk);
+      panic("release");
+    }
 
   lk->cpu = 0;
 
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..f5ab426 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -7,6 +7,11 @@
 #include "syscall.h"
 #include "defs.h"
 
+
+int syscall_counts[NSYSCALL];
+uint64 syscall_times[NSYSCALL];
+struct spinlock stats_lock[NSYSCALL];
+
 // Fetch the uint64 at addr from the current process.
 int
 fetchaddr(uint64 addr, uint64 *ip)
@@ -101,6 +106,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_history(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +134,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_history] sys_history,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo
 };
 
 void
@@ -138,10 +149,48 @@ syscall(void)
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+
+    uint64 start = ticks;
+    
     p->trapframe->a0 = syscalls[num]();
+    
+    uint64 end = ticks;
+    acquire(&stats_lock[num]);
+    syscall_counts[num]++;
+    syscall_times[num] += (end - start);
+    release(&stats_lock[num]);
+    
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
 }
+
+char*
+syscall_names[] = {
+  [SYS_fork]    "fork",
+  [SYS_exit]    "exit",
+  [SYS_wait]    "wait",
+  [SYS_pipe]    "pipe",
+  [SYS_read]    "read",
+  [SYS_kill]    "kill",
+  [SYS_exec]    "exec",
+  [SYS_fstat]   "fstat",
+  [SYS_chdir]   "chdir",
+  [SYS_dup]     "dup",
+  [SYS_getpid]  "getpid",
+  [SYS_sbrk]    "sbrk",
+  [SYS_sleep]   "sleep",
+  [SYS_uptime]  "uptime",
+  [SYS_open]    "open",
+  [SYS_write]   "write",
+  [SYS_mknod]   "mknod",
+  [SYS_unlink]  "unlink",
+  [SYS_link]    "link",
+  [SYS_mkdir]   "mkdir",
+  [SYS_close]   "close",
+  [SYS_history] "history",
+  [SYS_settickets] "settickets",
+  [SYS_getpinfo] "getpinfo"
+};
\ No newline at end of file
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..809745f 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_history 22
+#define SYS_settickets 23
+#define SYS_getpinfo 24
\ No newline at end of file
diff --git a/kernel/syscall_stat.h b/kernel/syscall_stat.h
new file mode 100644
index 0000000..4540f39
--- /dev/null
+++ b/kernel/syscall_stat.h
@@ -0,0 +1,10 @@
+#ifndef SYSCALL_STAT_H
+#define SYSCALL_STAT_H
+
+struct syscall_stat
+{
+    char syscall_name[16];
+    int syscall_count;
+    int accum_time;
+};
+#endif // SYSCALL_STAT_H
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..b333e03 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,10 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "syscall_stat.h"
+#include "pstat.h"
+
+extern struct proc proc[];
 
 uint64
 sys_exit(void)
@@ -91,3 +95,74 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+
+extern int syscall_counts[];
+extern uint64 syscall_times[];
+extern struct spinlock stats_lock[];
+extern char *syscall_names[];
+
+uint64
+sys_history(void)
+{
+  int num;
+  struct syscall_stat kst;
+  uint64 addr;
+
+  // if(argint_(0, &num) < 0)
+  // return -1;
+  // if(argaddr_(1, &addr) < 0)
+  //   return -1;
+  argint(0, &num);
+  argaddr(1, &addr);
+  if (num < 0 || num >= NSYSCALL)
+    return -1;
+  if (addr <= 0)
+    return -1;
+
+  acquire(&stats_lock[num]);
+  safestrcpy(kst.syscall_name, syscall_names[num], sizeof(kst.syscall_name));
+  kst.syscall_count = syscall_counts[num];
+  kst.accum_time = syscall_times[num];
+  release(&stats_lock[num]);
+
+  if (copyout(myproc()->pagetable, addr, (char *)&kst, sizeof(kst)) < 0)
+    return -1;
+
+  return 0;
+}
+
+uint64
+sys_settickets(void)
+{
+  int n;
+  int rv=0;
+
+  argint(0, &n); // fetch the number argument
+  
+
+  if(n < 1) {
+    // invalid ticket count; revert to default
+    n = DEFAULT_TICKET_COUNT;
+    rv=-1;
+  }
+
+  settickets(n);
+
+  return rv;
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 addr; // addr of user space
+
+  argaddr(0, &addr);
+  if(addr <= 0)
+    return -1;
+  else
+  {
+    return getpinfo(addr);
+  }
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index d454a7d..7192a71 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -10,6 +10,8 @@ struct spinlock tickslock;
 uint ticks;
 
 extern char trampoline[], uservec[], userret[];
+extern struct proc proc[];
+extern struct spinlock scheduler_lock;
 
 // in kernelvec.S, calls kerneltrap().
 void kernelvec();
@@ -163,13 +165,38 @@ kerneltrap()
 void
 clockintr()
 {
-  if(cpuid() == 0){
-    acquire(&tickslock);
-    ticks++;
-    wakeup(&ticks);
-    release(&tickslock);
+  struct proc *p = myproc();
+  
+  acquire(&tickslock);
+  ticks++;
+  int boost_value = (ticks % BOOST_INTERVAL == 0);
+  int boost_tick = ticks;
+  wakeup(&ticks);
+  release(&tickslock);
+
+  if(boost_value)
+  {
+    acquire(&scheduler_lock);
+    if(PRINT_SHCEDULING)
+      printf("[LOG REPORT] Boosting all processes to Lottery (QUEUE 1) at TICK-%d\n", boost_tick);
+    for(p=proc; p<&proc[NPROC];p++)
+    {
+      acquire(&p->lock);
+      
+      p->queue = 1; // BOOST ALL IRRESPECTIVELY
+      
+      release(&p->lock);
+    }
+    release(&scheduler_lock);
   }
 
+  // if(p && p->state == RUNNING) {
+  //   // Only increment if this proc is in queue 1 or queue 2
+  //   if(p->queue == 1 || p->queue == 2) {
+  //     p->timeslices_in_cur++;
+  //   }
+  // }
+
   // ask for the next timer interrupt. this also clears
   // the interrupt request. 1000000 is about a tenth
   // of a second.
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..ee117ad
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,40 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+// Usage: dummyproc [tickets] [& ...]
+//   Each process will spin in a loop, consuming CPU time, until it exits.
+//   Passing “&” in the shell creates multiple processes to test fairness.
+
+int
+main(int argc, char *argv[])
+{
+  int t = -1;   // if user didn’t specify, pass -1 to sys_settickets()
+  if(argc == 2) {
+    t = atoi(argv[1]);
+  }
+
+  // Set tickets (or revert to default if t<1)
+  if(settickets(t) < 0) {
+    printf("dummyproc: invalid ticket count %d, using default\n", t);
+  }
+
+  fork();
+  fork();
+  fork();
+
+  // Busy-wait loop
+  volatile int i, sum = 0;
+  for(i = 0; i < 1e12; i++){
+    sum++;
+  }
+  exit(0);
+}
+
+/*
+dummyproc 50 &;dummyproc 10 &;dummyproc 30 &;
+testprocinfo
+
+dummyproc 43 &;dummyproc 20 &
+testprocinfo
+
+*/
\ No newline at end of file
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..b99db85
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,30 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/syscall_stat.h"
+
+
+int
+main(int argc, char *argv[])
+{
+  struct syscall_stat st;
+
+  if(argc == 2) {
+    int num = atoi(argv[1]);
+    if(history(num, &st) < 0) {
+      printf("Error: history syscall failed for %d\n", num);
+      exit(1);
+    }
+    printf("%d: syscall: %s, #: %d, time: %d\n",
+           num, st.syscall_name, st.syscall_count, st.accum_time);
+  } else {
+    for(int i = 1; i <= NSYSCALL; i++) {
+      if(history(i, &st) == 0) {
+        printf("%d: syscall: %s, #: %d, time: %d\n",
+               i, st.syscall_name, st.syscall_count, st.accum_time);
+      }
+    }
+  }
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..22ad6c0
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,33 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+
+int
+main(int argc, char *argv[])
+{
+  struct pstat ps;
+
+  if(getpinfo(&ps) < 0) {
+    printf("testprocinfo: getpinfo failed\n");
+    exit(1);
+  }
+
+  printf("PID\t|\tIn use\t|\tinQ\t|\tOriginal Tickets\t|\tCurrent Tickets\t|\tTime Slices\n");
+  for(int i = 0; i < NPROC; i++){
+    if(ps.pid[i]!=0)
+    {
+      printf("%d\t\t%d\t\t%d\t\t\t%d\t\t\t\t%d\t\t%d\n",
+             ps.pid[i],
+             ps.inuse[i],
+             ps.inQ[i],
+             ps.tickets_original[i],
+             ps.tickets_current[i],
+             ps.time_slices[i]);
+    }
+  }
+  // volatile int i, sum = 0;
+  // for(i = 0; i < 1e12; i++){
+  //   sum++;
+  // }
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index f16fe27..f939d73 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,3 +1,5 @@
+#include "kernel/syscall_stat.h"
+#include "kernel/pstat.h"
 struct stat;
 
 // system calls
@@ -41,3 +43,8 @@ void *memcpy(void *, const void *, uint);
 // umalloc.c
 void* malloc(uint);
 void free(void*);
+
+int history(int num, struct syscall_stat *st);
+int settickets(int);
+int getpinfo(struct pstat*);
+
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..11a6776 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("history");
+entry("settickets");
+entry("getpinfo");
